basePath: /
definitions:
  controller.JSONRequest-dto_LoginData:
    properties:
      data:
        $ref: '#/definitions/dto.LoginData'
    type: object
  controller.JSONRequest-dto_RegisterData:
    properties:
      data:
        $ref: '#/definitions/dto.RegisterData'
    type: object
  controller.JSONRequest-dto_SendMessageData:
    properties:
      data:
        $ref: '#/definitions/dto.SendMessageData'
    type: object
  dto.LoginData:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dto.RegisterData:
    properties:
      email:
        type: string
      password:
        type: string
      userInfo:
        $ref: '#/definitions/model.UserInfo'
    type: object
  dto.SendMessageData:
    properties:
      message:
        type: string
      topic:
        type: string
    type: object
  model.UserInfo:
    properties:
      firstName:
        type: string
      lastName:
        type: string
      phone:
        type: string
    type: object
host: localhost:8081
info:
  contact:
    email: ray.lin@shoalter.com
    name: Ray Lin
  description: This is a template web API project of Go
  title: Go Web Template
  version: "1.0"
paths:
  /content/random:
    get:
      consumes:
      - application/json
      description: Before calling the API, you needs to set the JWT in the ```Authorization```
        header.
      produces:
      - text/plain
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Get Random UUID
      tags:
      - Secured API
  /rabbitmq/sendMessage:
    post:
      consumes:
      - application/json
      description: This message sending mode is "topic"
      parameters:
      - description: Message content
        in: body
        name: sendMessageData
        required: true
        schema:
          $ref: '#/definitions/controller.JSONRequest-dto_SendMessageData'
      produces:
      - text/plain
      responses: {}
      summary: Send RabbitMQ message to topic
      tags:
      - RabbitMQ
  /user/login:
    post:
      description: If login success, API will return the JWT in the response body
      parameters:
      - description: Login email and password
        in: body
        name: loginData
        required: true
        schema:
          $ref: '#/definitions/controller.JSONRequest-dto_LoginData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Login
      tags:
      - UserService
  /user/logout:
    post:
      consumes:
      - application/json
      description: Clear user's ```Authorization``` header
      produces:
      - application/json
      responses: {}
      summary: Logout
      tags:
      - UserService
  /user/register:
    post:
      consumes:
      - application/json
      description: Register new user
      parameters:
      - description: Register data
        in: body
        name: registerUser
        required: true
        schema:
          $ref: '#/definitions/controller.JSONRequest-dto_RegisterData'
      produces:
      - application/json
      responses: {}
      summary: Register
      tags:
      - UserService
  /user/verify:
    get:
      consumes:
      - application/json
      description: Verify user JWT in ```Authorization``` header.
      produces:
      - application/json
      responses: {}
      summary: Verify
      tags:
      - UserService
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
